{"namespace":"compwolf","type":"class","warnings":[],"declaration":"class freeable;","briefDescription":"Interface stating an object can be in an invalid, \"freed\" state.","detailedDescription":["Interface stating an object can be in an invalid, \"freed\" state."],"example":{"code":"","description":""},"related":["basic_freeable"],"baseClasses":[],"templateParameters":[],"constructor":{"overloads":[],"exceptions":[],"type":"undefined","warnings":[],"declaration":"","briefDescription":"","detailedDescription":[],"example":{"code":"","description":""},"related":[]},"memberGroups":[{"name":"","items":[{"overloads":[{"declaration":"virtual auto empty() const noexcept -> bool = 0;"}],"exceptions":[],"type":"function","warnings":[],"declaration":"","briefDescription":"Returns whether the object is freed.\nThis is a pure virtual function.","detailedDescription":["Returns whether the object is freed.\nThis is a pure virtual function."],"example":{"code":"","description":""},"related":[],"name":"is_freed"},{"overloads":[{"declaration":"virtual void free() noexcept = 0;"}],"exceptions":[],"type":"function","warnings":[],"declaration":"","briefDescription":"Frees the object.\nThis is a pure virtual function.","detailedDescription":["Frees the object.\nThis is a pure virtual function.","This can contain all destruction logic, and a freeable's actual destructor can simply call this.\nNote that a base class' destructor cannot call the subclass' virtual methods; therefore, if one class inherits from another (non-abstract class), both classes' destructor must call [[freeable::free]] (a second call to [[freeable::free]] will do nothing, as the object is already freed).","This should do nothing if the object is already freed."],"example":{"code":"","description":""},"related":[],"name":"free"}]}],"name":"freeable","movable":true,"copyable":true}