{
  "namespace": "compwolf",
  "type": "class",
  "warnings": [],
  "declaration": "template <typename EnumType, std::size_t Size = static_cast<std::size_t>(EnumType::size)> struct enum_bitset;",
  "briefDescription": "A set of an enum's values.",
  "detailedDescription": [
    "A set of an enum's values.",
    "Specifically an std::bitset whose bits represent different values from an enum."
  ],
  "example": {
    "code": "",
    "description": ""
  },
  "related": [],
  "baseClasses": [
    "std::bitset"
  ],
  "templateParameters": [],
  "copyable": true,
  "movable": true,
  "constructor": {
    "overloads": [
      {
        "declaration": "constexpr enum_bitset() noexcept;"
      },
      {
        "declaration": "using std::bitset<Value> = std::bitset<Value>",
        "description": "Can be constructed the same ways std::bitset can be constructed."
      },
      {
        "declaration": "constexpr enum_bitset(EnumType) noexcept;"
      },
      {
        "declaration": "constexpr enum_bitset(std::initializer_list<EnumType>) noexcept;",
        "description": "Having an enum value multiple times in the initializer list does nothing."
      },
      {
        "declaration": "constexpr enum_bitset& operator=(std::initializer_list<EnumType>) noexcept;"
      }
    ],
    "exceptions": [],
    "type": "undefined",
    "warnings": [],
    "declaration": "",
    "briefDescription": "",
    "detailedDescription": [],
    "example": {
      "code": "",
      "description": ""
    },
    "related": []
  },
  "memberGroups": [
    {
      "name": "Accessors",
      "items": [
        {
          "overloads": [
            {
              "declaration": "auto operator[](EnumType) noexcept -> std::bitset<Size>::reference"
            },
            {
              "declaration": "auto operator[](EnumType) noexcept const -> bool"
            }
          ],
          "exceptions": [],
          "type": "function",
          "warnings": [],
          "declaration": "",
          "briefDescription": "Whether the bitset contains the given enum value.",
          "detailedDescription": [
            "Whether the bitset contains the given enum value.\nAs in, returns the bit representing the given enum value."
          ],
          "example": {
            "code": "",
            "description": ""
          },
          "related": [],
          "name": "operator[]"
        },
        {
          "overloads": [
            {
              "declaration": "auto test(EnumType) const noexcept -> bool"
            }
          ],
          "exceptions": [],
          "type": "function",
          "warnings": [],
          "declaration": "",
          "briefDescription": "Whether the bitset contains the given enum value.",
          "detailedDescription": [
            "Whether the bitset contains the given enum value.\nAs in, returns the bit representing the given enum value."
          ],
          "example": {
            "code": "",
            "description": ""
          },
          "related": [],
          "name": "test"
        }
      ]
    },
    {
      "name": "Modifiers",
      "items": [
        {
          "overloads": [
            {
              "declaration": "auto set(EnumType, bool = true) noexcept -> enum_bitset&"
            }
          ],
          "exceptions": [],
          "type": "function",
          "warnings": [],
          "declaration": "",
          "briefDescription": "Sets whether the bitset contains the given enum value.",
          "detailedDescription": [
            "Sets whether the bitset contains the given enum value.\nAs in, sets the bit representing the given enum value to the given boolean value.",
            "Returns the bitset."
          ],
          "example": {
            "code": "",
            "description": ""
          },
          "related": [],
          "name": "set"
        },
        {
          "overloads": [
            {
              "declaration": "auto reset(EnumType) noexcept -> enum_bitset&"
            }
          ],
          "exceptions": [],
          "type": "function",
          "warnings": [],
          "declaration": "",
          "briefDescription": "Sets the bitset to not contain the given enum value.",
          "detailedDescription": [
            "Sets the bitset to not contain the given enum value.\nAs in, sets the bit representing the given enum value to 0.",
            "Returns the bitset."
          ],
          "example": {
            "code": "",
            "description": ""
          },
          "related": [],
          "name": "reset"
        },
        {
          "overloads": [
            {
              "declaration": "auto flip(EnumType) noexcept -> enum_bitset&"
            }
          ],
          "exceptions": [],
          "type": "function",
          "warnings": [],
          "declaration": "",
          "briefDescription": "If the bitset contains the given enum value, removes it;\nOtherwise, adds the given enum value to the bitset.",
          "detailedDescription": [
            "If the bitset contains the given enum value, removes it;\nOtherwise, adds the given enum value to the bitset.\nAs in, flips the bit representing the given enum value.",
            "Returns the bitset."
          ],
          "example": {
            "code": "",
            "description": ""
          },
          "related": [],
          "name": "flip"
        }
      ]
    }
  ],
  "name": "enum_bitset"
}